# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6.QtWidgets import QApplication, QDialog, QMainWindow, QPushButton
from PyQt6 import QtCore, QtGui, QtWidgets
from random import randint
from PySide6.QtCore import QTimer
import pyqtgraph as pg
from random import randint
from PyQt6 import uic
from PyQt6.QtCore import Qt


Drive_Arduino="USB Serial Device"
class Ui_MainWindow(QMainWindow):
    HCh1,HCh2,ZCh1,ZCh2,PCh1,PCh2,pointer=2,2,1,1,0,0,False
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setStyleSheet("QMainWindow\n"
"{\n"
"background:rgb(255, 255, 255)\n"
"}")
        MainWindow.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bieudo = PlotWidget(self.centralwidget)
        self.bieudo.setGeometry(QtCore.QRect(20, 0, 1500, 500))
        self.bieudo.setObjectName("bieudo")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 500, 1500, 250))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.comboMode = QtWidgets.QComboBox(self.frame)
        self.comboMode.setGeometry(QtCore.QRect(70, 150, 73, 22))
        self.comboMode.setMouseTracking(False)
        self.comboMode.setTabletTracking(False)
        self.comboMode.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboMode.setFrame(False)
        self.comboMode.setObjectName("comboMode")
        self.comboMode.addItem("")
        self.comboMode.addItem("")
        self.comboMode.addItem("")
        self.comboMach = QtWidgets.QComboBox(self.frame)
        self.comboMach.setGeometry(QtCore.QRect(70, 190, 73, 22))
        self.comboMach.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboMach.setFrame(False)
        self.comboMach.setObjectName("comboMach")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboInput = QtWidgets.QComboBox(self.frame)
        self.comboInput.setEnabled(True)
        self.comboInput.setGeometry(QtCore.QRect(180, 190, 73, 22))
        self.comboInput.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboInput.setObjectName("comboInput")
        self.comboInput.addItem("")
        self.comboInput.addItem("")
        self.CH1 = QtWidgets.QCheckBox(self.frame)
        self.CH1.setGeometry(QtCore.QRect(30, 40, 81, 20))
        self.CH1.setChecked(True)
        self.CH1.setObjectName("CH1")
        self.CH2 = QtWidgets.QCheckBox(self.frame)
        self.CH2.setGeometry(QtCore.QRect(30, 100, 81, 20))
        self.CH2.setChecked(True)
        self.CH2.setObjectName("CH2")
        self.comboxung = QtWidgets.QComboBox(self.frame)
        self.comboxung.setGeometry(QtCore.QRect(670, 50, 73, 22))
        self.comboxung.setFrame(False)
        self.comboxung.setObjectName("comboxung")
        self.comboxung.addItem("")
        self.comboxung.addItem("")
        self.comboxung.addItem("")
        self.ZoomCh1 = QtWidgets.QDoubleSpinBox(self.frame)
        self.ZoomCh1.setGeometry(QtCore.QRect(250, 50, 71, 22))
        self.ZoomCh1.setMinimum(0.01)
        self.ZoomCh1.setMaximum(100.0)
        self.ZoomCh1.setProperty("value", 1.0)
        self.ZoomCh1.setObjectName("ZoomCh1")
        self.PositionCh1 = QtWidgets.QDoubleSpinBox(self.frame)
        self.PositionCh1.setGeometry(QtCore.QRect(410, 50, 62, 22))
        self.PositionCh1.setMinimum(-10000.0)
        self.PositionCh1.setMaximum(10000.0)
        self.PositionCh1.setSingleStep(100.0)
        self.PositionCh1.setObjectName("PositionCh1")
        self.ZoomCh2 = QtWidgets.QDoubleSpinBox(self.frame)
        self.ZoomCh2.setGeometry(QtCore.QRect(250, 110, 71, 22))
        self.ZoomCh2.setSuffix("")
        self.ZoomCh2.setMinimum(0.01)
        self.ZoomCh2.setMaximum(100.0)
        self.ZoomCh2.setProperty("value", 1.0)
        self.ZoomCh2.setObjectName("ZoomCh2")
        self.PositionCh2 = QtWidgets.QDoubleSpinBox(self.frame)
        self.PositionCh2.setGeometry(QtCore.QRect(410, 110, 62, 22))
        self.PositionCh2.setMinimum(-10000.0)
        self.PositionCh2.setMaximum(10000.0)
        self.PositionCh2.setSingleStep(100.0)
        self.PositionCh2.setObjectName("PositionCh2")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(180, 50, 55, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(180, 110, 55, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(340, 50, 55, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(340, 120, 55, 16))
        self.label_4.setObjectName("label_4")
        self.Setting = QtWidgets.QPushButton(self.frame)
        self.Setting.setGeometry(QtCore.QRect(670, 100, 93, 28))
        self.Setting.setObjectName("Setting")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(50, 0, 1500, 16))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.Status_Arduino = QtWidgets.QLabel(self.frame)
        self.Status_Arduino.setGeometry(QtCore.QRect(850, 50, 201, 16))
        self.Status_Arduino.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.Status_Arduino.setObjectName("Status_Arduino")
        self.Status_Osi = QtWidgets.QLabel(self.frame)
        self.Status_Osi.setGeometry(QtCore.QRect(850, 80, 201, 16))
        self.Status_Osi.setObjectName("Status_Osi")
        self.Status_Twin = QtWidgets.QLabel(self.frame)
        self.Status_Twin.setGeometry(QtCore.QRect(850, 110, 191, 16))
        self.Status_Twin.setObjectName("Status_Twin")
        self.Pause = QtWidgets.QPushButton(self.frame)
        self.Pause.setGeometry(QtCore.QRect(670, 160, 93, 28))
        self.Pause.setObjectName("Pause")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.bieudo.scene().sigMouseClicked.connect(self.mousePressEvent)
        self.bieudo.scene().sigMouseMoved.connect(self.mouseMoved)
        self.CH1.stateChanged.connect(self.stateCh1)
        self.CH2.stateChanged.connect(self.stateCh2)
        self.x = list(range(100))  # 100 time points
        self.y = [randint(0,100) for _ in range(100)]  # 100 data points
        self.bieudo.setTitle("Biểu đồ điện áp theo thời gian",color="r", size="30pt")
        self.bieudo.setLabel('left', 'Điện áp',pen='b',left=False)
        self.bieudo.showAxes((True,False,False,False), True)
        self.bieudo.showLabel('bottom', show=True)
        self.bieudo.setBackground("white")
        self.timer = QTimer()
        self.timer.setInterval(50)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()
        #self.comboMach.currentIndexChanged.connect(self.changed_mach)
        self.PositionCh1.setSuffix("mV")
        self.PositionCh2.setSuffix("mV")
        self.ZoomCh1.setSuffix("x")
        self.ZoomCh2.setSuffix("x")
        self.PositionCh1.valueChanged.connect(self.setPosCh1)
        self.PositionCh2.valueChanged.connect(self.setPosCh2)
        self.ZoomCh1.valueChanged.connect(self.setZoomCh1)
        self.ZoomCh2.valueChanged.connect(self.setZoomCh2)
        self.Setting.clicked.connect(self.onSetting)
        self.Pause.clicked.connect(self.onPause)
        self.Status_Arduino.setVisible(False)
        self.Status_Osi.setVisible(False)
        self.Status_Twin.setVisible(False)
        self.vLine = pg.InfiniteLine(angle=90, movable=False)
        self.hLine = pg.InfiniteLine(angle=0, movable=False)
        self.bieudo.setMenuEnabled(False)
        pen = pg.mkPen(color=(0, 0, 255))
        self.data_line2=self.bieudo.plot(pen=pen, name ='blue')
        pen = pg.mkPen(color=(255, 0, 0))
        self.data_line1=self.bieudo.plot(pen=pen, name ='red')
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboMode.setItemText(0, _translate("MainWindow", "Offline"))
        self.comboMode.setItemText(1, _translate("MainWindow", "Online"))
        self.comboMode.setItemText(2, _translate("MainWindow", "Host"))
        self.comboMach.setItemText(0, _translate("MainWindow", "Mạch1"))
        self.comboMach.setItemText(1, _translate("MainWindow", "Mạch2"))
        self.comboMach.setItemText(2, _translate("MainWindow", "Mạch3"))
        self.comboMach.setItemText(3, _translate("MainWindow", "Mạch4"))
        self.comboMach.setItemText(4, _translate("MainWindow", "Mạch5"))
        self.comboInput.setItemText(0, _translate("MainWindow", "TP1.1"))
        self.comboInput.setItemText(1, _translate("MainWindow", "No"))
        self.CH1.setText(_translate("MainWindow", "Kênh Ch1"))
        self.CH2.setText(_translate("MainWindow", "Kênh Ch2"))
        self.comboxung.setItemText(0, _translate("MainWindow", "Sin"))
        self.comboxung.setItemText(1, _translate("MainWindow", "Răng Cưa"))
        self.comboxung.setItemText(2, _translate("MainWindow", "Vuông"))
        self.label.setText(_translate("MainWindow", "zoom"))
        self.label_2.setText(_translate("MainWindow", "zoom"))
        self.label_3.setText(_translate("MainWindow", "Position"))
        self.label_4.setText(_translate("MainWindow", "Position"))
        self.Setting.setText(_translate("MainWindow", "Cài Đặt"))
        self.Status_Arduino.setText(_translate("MainWindow", "TextLabel"))
        self.Status_Osi.setText(_translate("MainWindow", "TextLabel"))
        self.Status_Twin.setText(_translate("MainWindow", "TextLabel"))
        self.Pause.setText(_translate("MainWindow", "Pause"))
        self.mouse_left = pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(0,0,0))
        self.mouse_right = pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(185, 0, 253))
        self.text_left = pg.TextItem()
        self.text_right = pg.TextItem()
        self.text_point=pg.TextItem()
        self.truc_x=pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(99, 22, 24))
    def update_plot_data(self):
        '''
        global Com_Arduino,Com_Osi,Com_Twin
        Com=find_Com(lay_ports(),Drive_Arduino) 
        if Com!='None':
            self.Status_Arduino.setVisible(False)
            Com_Arduino=Com
        else :
            self.Status_Arduino.setVisible(True)
            self.Status_Arduino.setText("Không có cổng Com "+Drive_Arduino)
            Com_Arduino="None"

        Com=find_Com(lay_ports(),Drive_Osi)
        if  Com!='None':
            self.Status_Osi.setVisible(False)
            Com_Osi=Com
        else :
            self.Status_Osi.setVisible(True)
            self.Status_Osi.setText("Không có cổng Com "+Drive_Osi)
            Com_Osi="None"
        Com=find_Com(lay_ports(),Drive_Twin)
        if  Com!='None':
            self.Status_Twin.setVisible(False)
            Com_Twin=Com
        else :
            self.Status_Twin.setVisible(True)
            self.Status_Twin.setText("Không có cổng Com "+Drive_Twin)
            Com_Twin="None"
        '''

        if self.HCh1==2:
            self.data_line1.setVisible(True)
            self.HCh1=3
        elif self.HCh1==3:
            #########
            self.y = self.y[1:]
            self.y.append(randint(0,100))
            self.list_y=[0 for _ in range(100)]
            #########
            for i in range(len(self.y)):
                self.list_y[i]=self.ZCh1*int(self.y[i])+self.PCh1
                self.data_line1.setData(self.x, self.list_y)
        elif self.HCh1==0:
            self.data_line1.setVisible(False)
            self.HCh1=1



        if self.HCh2==2:
            self.data_line2.setVisible(True)
            self.HCh2=3
        elif self.HCh2==3:
            #########
            self.y = self.y[1:]
            self.y.append(randint(0,100))
            self.list_y=[0 for _ in range(100)]
            #########
            for i in range(len(self.y)):
                self.list_y[i]=self.ZCh2*int(self.y[i])+self.PCh2
            self.data_line2.setData(self.x, self.list_y)
        elif self.HCh2==0:
            self.data_line2.setVisible(False)
            self.HCh2=1

    def onPause(self):           
        self.HCh1=1
        self.HCh2=1
        self.pointer=not self.pointer
        if self.pointer==True:
            self.text_left.setVisible(True)
        else:
            self.text_left.setVisible(False) 

    def onSetting(self):

        dlg = EmployeeDlg(self)
        dlg.exec()

        print("abc")

    def setPosCh1(self, i):
        self.PCh1=i
        print(self.PCh1)

    def setPosCh2(self, i):
        self.PCh2=i
        print(i)

    def setZoomCh1(self, i):
        self.ZCh1=i
        print(i)

    def setZoomCh2(self, i):
        self.ZCh2=i
        print(i)

    def stateCh1(self,s):
        self.HCh1=s
        print(s)

    def stateCh2(self,s):
        self.HCh2=s
        print(s)

    def changed_mach(self,index):
        print(index)
        self.comboInput.clear()
        if index==0:
            self.comboInput.addItem("TP1.1")
        elif index==1:
            self.comboInput.addItem("TP2.1")
        elif index==2:
            self.comboInput.addItems(["TP3.1","TP3.2","TP3.1, TP3.2"])
        elif index==3:
            self.comboInput.addItems(["TP4.1","TP4.2","TP4.1, TP4.2"])
        elif index==4:
            self.comboInput.addItem("TP5.1")
        self.comboInput.addItem("No")
        '''
        print(Com_Arduino)
        if Com_Arduino !="None":
            try:
                ser=serial.Serial(Com_Arduino)
                ser.write('test'.encode()) 
                ser.flush()
                ser.close()
            except Exception:
                print("Error")
        '''

    def mousePressEvent(self, event):
        if event.buttons()==Qt.MouseButton.LeftButton:
            point_x=self.mousePoint.x()
            if point_x<0:
                point_x=0
            elif point_x>100:
                point_x=99
            point_y=self.y[int(point_x)]
            self.mouse_left.setPos(point_x)
            self.bieudo.addItem(self.mouse_left)
            self.text_left.setHtml(
            "<span style='color: black'>Time={:0.1f}, \
             <span style='color: black'>V_Ch1={:0.1f}</span>".format(
               point_x , point_y))
            self.text_left.setPos(point_x,self.mousePoint.y())
            self.bieudo.addItem(self.text_left)
        elif event.buttons()==Qt.MouseButton.RightButton:
            point_x=int(self.mousePoint.x())
            if point_x<0:
                point_x=0
            elif point_x>100:
                point_x=99
            point_y=self.y[int(point_x)]
            self.mouse_right.setPos(point_x)
            self.bieudo.addItem(self.mouse_right)
            self.text_right.setHtml(
            "<span style='color: violet'>Time={:0.1f}, \
             <span style='color: violet'>V_Ch1={:0.1f}</span>".format(
               point_x , point_y))
            self.text_right.setPos(point_x,self.mousePoint.y())
            self.bieudo.addItem(self.text_right)

    def mouseMoved(self,x_y):
        self.mousePoint = self.bieudo.plotItem.vb.mapSceneToView(x_y)
        if self.bieudo.sceneBoundingRect().contains(x_y) and self.HCh1==1 and self.HCh2==1:
            self.bieudo.enableAutoRange('y',False)
            self.bieudo.enableAutoRange('x',False)
            point_x = int(self.mousePoint.x())
            point_y = int(self.mousePoint.y())
            self.truc_x.setPos(point_x)
            self.bieudo.addItem(self.truc_x)
            if point_x>100:
                point_x=100
            elif point_x<0:
                point_x=0
            self.text_point.setHtml(
            "<span style='color: black'>Time={:0.1f}, \
             <span style='color: black'>V_Ch1={:0.1f}</span>".format(
                point_x, self.y[point_y]))
            self.text_point.setPos(int(self.mousePoint.x()),int(self.mousePoint.y()))
            self.bieudo.addItem(self.text_point)

from pyqtgraph import PlotWidget

class EmployeeDlg(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        # Load the dialog's GUI
        uic.loadUi("dialog.ui", self)
        f = open('myfile.txt', 'r')
        for line in range (3):
            data = f.readline()
            data=data[4:len(data)]
            i=0
            while data.find(',',i+1,len(data))!=-1:
                if line==0:
                    self.Arduino.setCurrentText(Drive_Arduino)
                    self.Arduino.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                elif line==1:
                    self.Osi.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                elif line==2:
                    self.Twin.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                i=data.find(',',i+1,len(data))
        f.close()
        self.Arduino.setEditable(True)
        self.Osi.setEditable(True)
        self.Twin.setEditable(True)
        self.Arduino.editTextChanged.connect(self.newArduino)
        self.Osi.editTextChanged.connect(self.newOsi)
        self.Twin.editTextChanged.connect(self.newTwin)

    def newArduino(self,i):
        COM_Arrduino=str(i)
        print(COM_Arrduino)
        

    def newOsi(self,i):
        print(i)

    def newTwin(self,i):
        print(i)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
