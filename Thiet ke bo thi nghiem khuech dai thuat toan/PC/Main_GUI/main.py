# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import time
from PyQt6.QtWidgets import QApplication, QDialog, QMainWindow, QPushButton
from PyQt6 import QtCore, QtGui, QtWidgets
from random import randint
from PySide6.QtCore import QTimer
import pyqtgraph as pg
from random import randint
from PyQt6 import uic
from PyQt6.QtCore import Qt
import serial

class Ui_selectCom(object):
    def setupUi(self, selectCom):
        selectCom.setObjectName("selectCom")
        selectCom.resize(400, 200)
        selectCom.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(selectCom)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(54, 20, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(50, 80, 302, 46))
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.comboBox_2 = QtWidgets.QComboBox(self.widget_2)
        self.comboBox_2.setObjectName("comboBox_2")
        self.horizontalLayout_2.addWidget(self.comboBox_2)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_2.setStyleSheet("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        selectCom.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(selectCom)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 26))
        self.menubar.setObjectName("menubar")
        selectCom.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(selectCom)
        self.statusbar.setObjectName("statusbar")
        selectCom.setStatusBar(self.statusbar)
        list_com=[]
        for i in range (1,21):
            list_com.append("COM"+str(i))
        self.comboBox_2.addItems(list_com)
        self.pushButton_2.clicked.connect(self.click)
        self.retranslateUi(selectCom)
        QtCore.QMetaObject.connectSlotsByName(selectCom)


    def click(self):
        self.Main = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.Main)
        self.Main.show()
        global ser
        ser=serial.Serial(self.comboBox_2.currentText(),baudrate = 9600, parity=serial.PARITY_NONE,stopbits=serial.STOPBITS_ONE,bytesize=serial.EIGHTBITS,timeout=5)
        selectCom.close()

    def retranslateUi(self, selectCom):
        _translate = QtCore.QCoreApplication.translate
        selectCom.setWindowTitle(_translate("selectCom", "MainWindow"))
        self.label_3.setText(_translate("selectCom", "Chọn cổng Com"))
        self.label_2.setText(_translate("selectCom", "Com thông thường"))
        self.pushButton_2.setText(_translate("selectCom", "Tiếp tục"))


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        self.send=""
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()
        MainWindow.setWindowTitle('Hiển thị điện áp');
        MainWindow.setStyleSheet("QMainWindow\n"
"{\n"
"background:rgb(255, 255, 255)\n"
"}")
        MainWindow.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bieudo = PlotWidget(self.centralwidget)
        self.bieudo.setGeometry(QtCore.QRect(20, 90, 1500, 500))
        self.bieudo.setObjectName("bieudo")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 600, 1500, 250))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.comboMode = QtWidgets.QComboBox(self.frame)
        self.comboMode.setGeometry(QtCore.QRect(130, 30, 60, 25))
        self.comboMode.setMouseTracking(False)
        self.comboMode.setTabletTracking(False)
        self.comboMode.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboMode.setFrame(False)
        self.comboMode.setObjectName("comboMode")
        self.comboMode.addItem("")
        self.comboMode.addItem("")
        self.comboMode.addItem("")
        self.comboMach = QtWidgets.QComboBox(self.frame)
        self.comboMach.setGeometry(QtCore.QRect(290, 30, 60, 25))
        self.comboMach.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboMach.setFrame(False)
        self.comboMach.setObjectName("comboMach")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboMach.addItem("")
        self.comboInput = QtWidgets.QComboBox(self.frame)
        self.comboInput.setEnabled(True)
        self.comboInput.setGeometry(QtCore.QRect(450, 30, 60, 25))
        self.comboInput.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.comboInput.setObjectName("comboInput")
        self.comboInput.addItem("")
        self.comboInput.addItem("")
        self.CH1 = QtWidgets.QCheckBox(self.frame)
        self.CH1.setGeometry(QtCore.QRect(80, 80, 80, 25))
        self.CH1.setChecked(True)
        self.CH1.setObjectName("CH1")
        self.CH2 = QtWidgets.QCheckBox(self.frame)
        self.CH2.setGeometry(QtCore.QRect(80, 130, 80, 25))
        self.CH2.setChecked(True)
        self.CH2.setObjectName("CH2")
        self.comboxung = QtWidgets.QComboBox(self.frame)
        self.comboxung.setGeometry(QtCore.QRect(810, 30, 60, 25))
        self.comboxung.setFrame(False)
        self.comboxung.setObjectName("comboxung")
        self.comboxung.addItem("")
        self.comboxung.addItem("")
        self.comboxung.addItem("")
        self.ZoomCh1 = QtWidgets.QDoubleSpinBox(self.frame)
        self.ZoomCh1.setGeometry(QtCore.QRect(290, 140, 60, 25))
        self.ZoomCh1.setMinimum(0.01)
        self.ZoomCh1.setMaximum(100.0)
        self.ZoomCh1.setProperty("value", 1.0)
        self.ZoomCh1.setObjectName("ZoomCh1")
        self.PositionCh1 = QtWidgets.QDoubleSpinBox(self.frame)
        self.PositionCh1.setGeometry(QtCore.QRect(450, 80, 60, 25))
        self.PositionCh1.setMinimum(-10000.0)
        self.PositionCh1.setMaximum(10000.0)
        self.PositionCh1.setSingleStep(100.0)
        self.PositionCh1.setObjectName("PositionCh1")
        self.ZoomCh2 = QtWidgets.QDoubleSpinBox(self.frame)
        self.ZoomCh2.setGeometry(QtCore.QRect(290, 80, 60, 25))
        self.ZoomCh2.setSuffix("")
        self.ZoomCh2.setMinimum(0.01)
        self.ZoomCh2.setMaximum(100.0)
        self.ZoomCh2.setProperty("value", 1.0)
        self.ZoomCh2.setObjectName("ZoomCh2")
        self.PositionCh2 = QtWidgets.QDoubleSpinBox(self.frame)
        self.PositionCh2.setGeometry(QtCore.QRect(450, 140, 60, 25))
        self.PositionCh2.setMinimum(-10000.0)
        self.PositionCh2.setMaximum(10000.0)
        self.PositionCh2.setSingleStep(100.0)
        self.PositionCh2.setObjectName("PositionCh2")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(240, 140, 60, 25))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(240, 80, 60, 25))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(400, 80, 60, 25))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(400, 140, 60, 25))
        self.label_4.setObjectName("label_4")
        self.Setting = QtWidgets.QPushButton(self.frame)
        self.Setting.setGeometry(QtCore.QRect(740, 80, 60, 25))
        self.Setting.setObjectName("Setting")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(50, 0, 1500, 16))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.Status_Arduino = QtWidgets.QLabel(self.frame)
        self.Status_Arduino.setGeometry(QtCore.QRect(960, 30, 130, 35))
        self.Status_Arduino.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.Status_Arduino.setObjectName("Status_Arduino")
        self.Status_Osi = QtWidgets.QLabel(self.frame)
        self.Status_Osi.setGeometry(QtCore.QRect(960, 60, 130, 35))
        self.Status_Osi.setObjectName("Status_Osi")
        self.Status_Twin = QtWidgets.QLabel(self.frame)
        self.Status_Twin.setGeometry(QtCore.QRect(960, 90, 150, 35))
        self.Status_Twin.setObjectName("Status_Twin")
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(620, 30, 60, 25))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(540, 30, 60, 25))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setGeometry(QtCore.QRect(80, 30, 60, 25))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(240, 30, 60, 25))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.frame)
        self.label_8.setGeometry(QtCore.QRect(400, 30, 60, 25))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(740, 30, 60, 25))
        self.label_9.setObjectName("label_9")
        self.dial = QtWidgets.QDial(self.frame)
        self.dial.setGeometry(QtCore.QRect(600, 100, 81, 71))
        self.dial.setMinimum(250)
        self.dial.setMaximum(1000)
        self.dial.setObjectName("dial")
        self.label_10 = QtWidgets.QLabel(self.frame)
        self.label_10.setGeometry(QtCore.QRect(630, 80, 31, 25))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(20, 10, 1501, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_11.setFont(font)
        self.label_11.setScaledContents(False)
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_11.setObjectName("label_11")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.label_11.setStyleSheet("color:red")
        self.CH1.setStyleSheet(u"QCheckBox{\n"
"color:rgb(255, 0, 0)\n"
"}")
        self.CH2.setStyleSheet(u"QCheckBox{\n"
"color:rgb(0, 0, 255)\n"
"}")

        self.dial.setMinimum(100)
        self.dial.setMaximum(1000)
        self.dial.setValue(100)
        self.point=100

        self.bieudo.scene().sigMouseClicked.connect(self.mousePressEvent)
        self.bieudo.scene().sigMouseMoved.connect(self.mouseMoved)
        #self.bieudo.setTitle("Biểu đồ điện áp theo thời gian",color="r", size="30pt")
        self.bieudo.setLabel('left', 'Điện áp (V)',pen='b',left=False)
        self.bieudo.showAxes((True,False,False,False), True)
        self.bieudo.showLabel('bottom', show=True)
        self.bieudo.setBackground("white")
        self.timer = QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()
        self.comboMach.currentIndexChanged.connect(self.changed_mach)
        self.comboInput.currentIndexChanged.connect(self.changed_input)
        self.comboxung.currentIndexChanged.connect(self.changed_input)
        self.PositionCh1.setSuffix("mV")
        self.PositionCh2.setSuffix("mV")
        self.ZoomCh1.setSuffix("x")
        self.ZoomCh2.setSuffix("x")
        self.Setting.clicked.connect(self.onSetting)
        self.Status_Arduino.setVisible(False)
        self.Status_Osi.setVisible(False)
        self.Status_Twin.setVisible(False)
        self.vLine = pg.InfiniteLine(angle=90, movable=False)
        self.hLine = pg.InfiniteLine(angle=0, movable=False)
        self.bieudo.setMenuEnabled(False)
        self.mouse_left = pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(0,0,0))
        self.mouse_right = pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(185, 0, 253))
        self.text_left = pg.TextItem()
        self.text_right = pg.TextItem()
        self.text_point=pg.TextItem()
        self.truc_x=pg.InfiniteLine(angle=90, movable=False,pen=pg.mkPen(99, 22, 24))
        self.comboBox.currentIndexChanged.connect(self.changed_tt)
        self.x = []
        self.y=[]
        self.y1=[]
        '''
        while len(self.x)!=100 and len(self.y)!=100 :
            ser.write("test".encode()) 
            ser.flush()
            s = ser.readline()
            data = s.decode()			# decode s
            data = data.rstrip()			# cut "\r\n" at last of string
            if(len(data)!=0):
                #ser.reset_input_buffer()
                self.y.append(float(data[4:data.find(' ')])/1000)
                self.y1.append(float(data[data.find(' ')+5:data.find(' ',data.find(' ')+1)])/100000)
                self.x.append(float(data[data.find(' ',data.find(' ')+1)+7:len(data)-1])/100)
        '''
        pen = pg.mkPen(color=(0, 0, 255))
        self.data_line2=self.bieudo.plot(pen=pen, name ='blue')
        pen = pg.mkPen(color=(255, 0, 0))
        self.data_line1=self.bieudo.plot(pen=pen, name ='red')

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboMode.setItemText(0, _translate("MainWindow", "Offline"))
        self.comboMode.setItemText(1, _translate("MainWindow", "Online"))
        self.comboMode.setItemText(2, _translate("MainWindow", "Host"))
        self.comboMach.setItemText(0, _translate("MainWindow", "Mạch1"))
        self.comboMach.setItemText(1, _translate("MainWindow", "Mạch2"))
        self.comboMach.setItemText(2, _translate("MainWindow", "Mạch3"))
        self.comboMach.setItemText(3, _translate("MainWindow", "Mạch4"))
        self.comboMach.setItemText(4, _translate("MainWindow", "Mạch5"))
        self.comboInput.setItemText(0, _translate("MainWindow", "TP1.1"))
        self.comboInput.setItemText(1, _translate("MainWindow", "No"))
        self.CH1.setText(_translate("MainWindow", "Kênh Ch1"))
        self.CH2.setText(_translate("MainWindow", "Kênh Ch2"))
        self.comboxung.setItemText(0, _translate("MainWindow", "Sin"))
        self.comboxung.setItemText(1, _translate("MainWindow", "Răng Cưa"))
        self.comboxung.setItemText(2, _translate("MainWindow", "Vuông"))
        self.label.setText(_translate("MainWindow", "Zoom"))
        self.label_2.setText(_translate("MainWindow", "Zoom"))
        self.label_3.setText(_translate("MainWindow", "Position"))
        self.label_4.setText(_translate("MainWindow", "Position"))
        self.Setting.setText(_translate("MainWindow", "Cài Đặt"))
        self.Status_Arduino.setText(_translate("MainWindow", "TextLabel"))
        self.Status_Osi.setText(_translate("MainWindow", "TextLabel"))
        self.Status_Twin.setText(_translate("MainWindow", "TextLabel"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Run"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Point"))
        self.label_5.setText(_translate("MainWindow", "Trạng thái:"))
        self.label_6.setText(_translate("MainWindow", "Mode"))
        self.label_7.setText(_translate("MainWindow", "Mạch"))
        self.label_8.setText(_translate("MainWindow", "Switch"))
        self.label_9.setText(_translate("MainWindow", "Xung vào"))
        self.label_10.setText(_translate("MainWindow", "Point"))
        self.label_11.setText(_translate("MainWindow", "Biểu đồ điện áp theo thời gian(V/s)"))

    def changed_tt(self,index):
        if index==0:
            self.bieudo.enableAutoRange('y',False)
            self.mouse_left.setVisible(False)
            self.mouse_right.setVisible(False)
            self.text_left.setVisible(False)
            self.text_right.setVisible(False)
            self.text_point.setVisible(False)
            self.truc_x.setVisible(False)
        else: 
            self.bieudo.enableAutoRange('y',True)
            self.mouse_left.setVisible(True)
            self.mouse_right.setVisible(True)
            self.text_left.setVisible(True)
            self.text_right.setVisible(True)

    def update_plot_data(self):

        if self.comboBox.currentIndex()==0 :
            if len(self.send)==10:
                ser.write(self.send.encode()) 
                ser.flush()
                print(self.send)
                self.send="output:"
            else:
                ser.write("Lay".encode()) 
                ser.flush()                
            s = ser.readline()
            data = s.decode()			# decode s
            data = data.rstrip()			# cut "\r\n" at last of string
            if data[4:data.find(' ')] and data[data.find(' ')+5:data.find(' ',data.find(' ')+1)] and data[data.find(' ',data.find(' ')+1)+7:len(data)-1]:
                self.bieudo.enableAutoRange('x','y',True)
                if len(self.x)>=self.dial.value():
                    self.x=self.x[len(self.x)-self.dial.value()+1:]
                    self.y=self.y[len(self.y)-self.dial.value()+1:]
                    self.y1=self.y1[len(self.y1)-self.dial.value()+1:]
                ser.reset_input_buffer()
                self.y.append(float(data[4:data.find(' ')])/1000)
                self.y1.append(float(data[data.find(' ')+5:data.find(' ',data.find(' ')+1)])/100000)
                self.x.append(float(data[data.find(' ',data.find(' ')+1)+7:len(data)-1])/100)


        if self.CH1.isChecked()==True:
            self.data_line1.setVisible(True)
            list_y=[]
            for i in range(len(self.y)):
                list_y.append(0.0)
            for i in range(len(self.y)):
                list_y[i]=self.ZoomCh2.value()*float(self.y[i])+0.001*self.PositionCh1.value()
            self.data_line1.setData(self.x,list_y)
        else:
            self.data_line1.setVisible(False)

        if self.CH2.isChecked()==True:
            self.data_line2.setVisible(True)
            list_y=[]
            for i in range(len(self.y)):
                list_y.append(0.0)
            for i in range(len(self.y1)):
                list_y[i]=self.ZoomCh1.value()*float(self.y1[i])+0.001*self.PositionCh2.value()
            self.data_line2.setData(self.x, list_y)
        else:
            self.data_line2.setVisible(False)

    def onSetting(self):

        dlg = EmployeeDlg(self)
        dlg.exec()

        print("abc")

    def changed_input(self):
        self.send="output:"+str(self.comboMach.currentIndex())+str(self.comboInput.currentIndex())+str(self.comboxung.currentIndex())
        
    def changed_mach(self,index):
        self.send="output:"
        self.comboInput.clear()
        if index==0:
            self.send=self.send+"000"
            self.comboInput.addItem("TP1.1")
        elif index==1:
            self.send=self.send+"100"
            self.comboInput.addItem("TP2.1")
        elif index==2:
            self.send=self.send+"200"
            self.comboInput.addItems(["TP3.1","TP3.2","TP3.1, TP3.2"])
        elif index==3:
            self.send=self.send+"300"
            self.comboInput.addItems(["TP4.1","TP4.2","TP4.1, TP4.2"])
        elif index==4:
            self.send=self.send+"400"
            self.comboInput.addItem("TP5.1")
        self.comboInput.addItem("No")


    def mousePressEvent(self, event):
        if event.buttons()==Qt.MouseButton.LeftButton and self.comboBox.currentIndex()==1:
            point_x=float(self.mousePoint.x())
            if point_x<min(self.x):
                point_x=min(self.x)
            elif point_x>max(self.x):
                point_x=max(self.x)
            index=0
            for i in range (0,len(self.y)-1):
                if(point_x <= self.x[i]):
                    index=i-1
                    break
            
            self.mouse_left.setPos(point_x)
            self.bieudo.addItem(self.mouse_left)
            self.text_left.setHtml(
            "<span style='color: black'>Time={:0.3f}s, \
             <span style='color: red'>V_Ch1={:0.3f}V, \
            <span style='color: blue'>V_Ch2={:0.3f}V </span>".format(
                point_x, self.y[index],self.y1[index]))
            self.text_left.setPos(point_x,self.mousePoint.y())
            self.bieudo.addItem(self.text_left)
        elif event.buttons()==Qt.MouseButton.RightButton and self.comboBox.currentIndex()==1:
            point_x=float(self.mousePoint.x())
            if point_x<min(self.x):
                point_x=min(self.x)
            elif point_x>max(self.x):
                point_x=max(self.x)

            index=0
            for i in range (0,len(self.y)-1):
                if(point_x <= self.x[i]):
                    index=i-1
                    break
            self.mouse_right.setPos(point_x)
            self.bieudo.addItem(self.mouse_right)
            self.text_right.setHtml(
            "<span style='color: black'>Time={:0.3f}s, \
             <span style='color: red'>V_Ch1={:0.3f}V, \
            <span style='color: blue'>V_Ch2={:0.3f}V</span>".format(
                point_x, self.y[index],self.y1[index]))
            self.text_right.setPos(point_x,self.mousePoint.y())
            self.bieudo.addItem(self.text_right)

    def mouseMoved(self,x_y):
        self.mousePoint = self.bieudo.plotItem.vb.mapSceneToView(x_y)
        point_x =float(self.mousePoint.x())
        point_y = float(self.mousePoint.y())
        if self.bieudo.sceneBoundingRect().contains(x_y) and self.comboBox.currentIndex()==1 :
            self.text_point.setVisible(True)
            self.truc_x.setVisible(True)
            self.truc_x.setPos(point_x)
            self.bieudo.addItem(self.truc_x)
            if point_x>max(self.x):
                point_x=max(self.x)
            elif point_x<min(self.x):
                point_x=min(self.x)
            index=0
            for i in range (0,len(self.y)-1):
                if(point_x <= self.x[i]):
                    index=i-1
                    break
            
            self.text_point.setHtml(
            "<span style='color: black'>Time={:0.3f}s, \
             <span style='color: red'>V_Ch1={:0.3f}V, \
            <span style='color: blue'>V_Ch2={:0.3f}V</span>".format(
                point_x, self.y[index],self.y1[index]))


            self.text_point.setPos(float(self.mousePoint.x()),float(self.mousePoint.y()))
            self.bieudo.addItem(self.text_point)
        else:
            self.text_point.setVisible(False)
            self.truc_x.setVisible(False)

from pyqtgraph import PlotWidget

class EmployeeDlg(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        # Load the dialog's GUI
        uic.loadUi("dialog.ui", self)
        f = open('myfile.txt', 'r')
        for line in range (3):
            data = f.readline()
            data=data[4:len(data)]
            i=0
            while data.find(',',i+1,len(data))!=-1:
                if line==0:
                    self.Arduino.setCurrentText(Drive_Arduino)
                    self.Arduino.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                elif line==1:
                    self.Osi.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                elif line==2:
                    self.Twin.addItem(str(data[i+1:data.find(',',i+1,len(data))]))
                i=data.find(',',i+1,len(data))
        f.close()
        self.Arduino.setEditable(True)
        self.Osi.setEditable(True)
        self.Twin.setEditable(True)
        self.Arduino.editTextChanged.connect(self.newArduino)
        self.Osi.editTextChanged.connect(self.newOsi)
        self.Twin.editTextChanged.connect(self.newTwin)

    def newArduino(self,i):
        COM_Arrduino=str(i)
        print(COM_Arrduino)
        

    def newOsi(self,i):
        print(i)

    def newTwin(self,i):
        print(i)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    selectCom = QtWidgets.QMainWindow()
    ui = Ui_selectCom()
    ui.setupUi(selectCom)
    selectCom.show()
    sys.exit(app.exec())
